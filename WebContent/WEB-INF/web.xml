<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	id="WebApp_ID" version="2.5">
	<display-name>dwr-ext-chat</display-name>
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:*.xml</param-value>
	</context-param>
	
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	<listener>
		<listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
	</listener>
	<filter>
		<filter-name>SetCharacterEncoding</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>SetCharacterEncoding</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<filter>
		<filter-name>ServletContextRequestLogging</filter-name>
		<filter-class>org.springframework.web.filter.ServletContextRequestLoggingFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>ServletContextRequestLogging</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<servlet>
		<servlet-name>dwr-invoker</servlet-name>
		<servlet-class>org.directwebremoting.spring.DwrSpringServlet</servlet-class>
		
		<!-- This should NEVER be present in live -->
		<init-param>
			<param-name>debug</param-name>
			<param-value>true</param-value>
		</init-param>

		<!-- Remove this unless you want to use active reverse ajax -->
		<init-param>
			<param-name>activeReverseAjaxEnabled</param-name>
			<param-value>true</param-value>
		</init-param>

		<!-- By default DWR creates application scope objects when they are first 
			used. This creates them when the app-server is started -->
		<init-param>
			<param-name>initApplicationScopeCreatorsAtStartup</param-name>
			<param-value>false</param-value>
		</init-param>

		<!-- This enables full streaming mode. It's probably better to leave this 
			out if you are running across the internet -->
		<init-param>
			<param-name>maxWaitAfterWrite</param-name>
			<param-value>-1</param-value>
		</init-param>

		<!-- In DWR 3 a JSON/JSONP RESTian API has been added that allows users 
			to access Java services exposed to DWR via an URL: http://example.com/dwr/jsonp/ClassName/methodName/param1/param2 
			DWR will reply with a JSON structure containing the result of calling ClassName.methodName("param1", 
			"param2"); This allows for seamless integration with JavaScript toolkits 
			(DOJO, ExtJs, jQuery, etc.) while eliminating the need for the developer 
			to convert the return types of their exposed Java methods into JSON manually 
			- DWR's server engine handles this. -->
		<init-param>
			<param-name>jsonpEnabled</param-name>
			<param-value>false</param-value>
		</init-param>
		
		<!-- Use Customer ScriptSessionManager -->
		<init-param>
			<param-name>org.directwebremoting.extend.ScriptSessionManager</param-name>
			<param-value>org.cweili.webchat.util.ScriptSessionManager</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>dwr-invoker</servlet-name>
		<url-pattern>/dwr/*</url-pattern>
	</servlet-mapping>
	<welcome-file-list>
		<welcome-file>index.html</welcome-file>
		<welcome-file>index.htm</welcome-file>
		<welcome-file>index.jsp</welcome-file>
		<welcome-file>default.html</welcome-file>
		<welcome-file>default.htm</welcome-file>
		<welcome-file>default.jsp</welcome-file>
	</welcome-file-list>
</web-app>